using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.Networking;
using System.Text;

public class PositionTracker : MonoBehaviour
{
    // ... (keep existing fields)

    [System.Serializable]
    private class ErrorResponse
    {
        public string error;
    }

    IEnumerator GetNavigationInstructions(int currentFloor, string currentRoom, Vector3 playerPosition)
    {
        // ... (keep existing code for creating the request)

        using (UnityWebRequest webRequest = new UnityWebRequest(ApiUrl, "POST"))
        {
            byte[] bodyRaw = Encoding.UTF8.GetBytes(jsonBody);
            webRequest.uploadHandler = new UploadHandlerRaw(bodyRaw);
            webRequest.downloadHandler = new DownloadHandlerBuffer();
            webRequest.SetRequestHeader("Content-Type", "application/json");

            yield return webRequest.SendWebRequest();

            if (webRequest.result == UnityWebRequest.Result.Success)
            {
                string response = webRequest.downloadHandler.text;
                Debug.Log("Received navigation instructions: " + response);
                
                NavigationResponse navigationData = JsonUtility.FromJson<NavigationResponse>(response);
                if (navigationData != null && navigationData.instructions != null)
                {
                    DisplayInstructions(navigationData.instructions);
                }
                else
                {
                    Debug.LogError("Failed to parse navigation response");
                }
            }
            else
            {
                Debug.LogError("Error getting navigation instructions: " + webRequest.error);
                Debug.LogError("Response Code: " + webRequest.responseCode);
                string errorBody = webRequest.downloadHandler.text;
                Debug.LogError("Response Body: " + errorBody);

                // Try to parse the error message
                ErrorResponse errorResponse = JsonUtility.FromJson<ErrorResponse>(errorBody);
                if (errorResponse != null && !string.IsNullOrEmpty(errorResponse.error))
                {
                    Debug.LogError("Server Error: " + errorResponse.error);
                }
            }
        }
    }

    void DisplayInstructions(List<string> instructions)
    {
        if (instructions == null || instructions.Count == 0)
        {
            Debug.LogWarning("No navigation instructions received");
            return;
        }

        Debug.Log("Navigation Instructions:");
        foreach (var instruction in instructions)
        {
            Debug.Log(instruction);
        }
        // Here you would typically update your UI to display these instructions to the player
    }

    // ... (keep the rest of the existing code)
}